openapi: 3.0.3
info:
  version: "1.0.0"
  title: "Food Delivery API"
  description: "API for an online food delivery service."

servers:
  - url: http://localhost:3000/api

paths:
  /users/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Bad request (e.g. invalid input)
        '500':
            description: Internal server error
  /users/login:
    post:
      summary: Authenticate user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /users/login/google:
    get:
      summary: Start authentication with Google
      responses:
        '302':
          description: Redirect to Google authentication page

  /users/login/google/callback:
    get:
      summary: Handle Google authentication callback
      responses:
        '200':
          description: User authenticated successfully with Google
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /users/forgot-password:
    post:
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Password reset link sent

  /users/reset-password:
    post:
      summary: Reset password using the provided token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                resetToken:
                  type: string
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password reset successfully

  /users/confirm-email:
    post:
      summary: Confirm email using the provided token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                confirmationToken:
                  type: string
      responses:
        '200':
          description: Email confirmed successfully

  /users/change-password:
    post:
      summary: Change password for authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                currentPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
      responses:
        '200':
          description: Password changed successfully
  /users/profile:
    get:
      summary: Get user's profile information
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

    put:
      summary: Update user's profile information
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successfully updated user profile
        '400':
          description: Bad request (e.g. invalid input)
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /products:
    get:
      summary: Retrieve a list of products
      parameters:
        - in: query
          name: category
          schema:
            type: string
          description: Filter products by category
        - in: query
          name: priceMin
          schema:
            type: number
          description: Filter products with price greater than or equal to this value
        - in: query
          name: priceMax
          schema:
            type: number
          description: Filter products with price less than or equal to this value
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [ popularity, price ]
          description: Sort products by popularity or price
      responses:
        '200':
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

    post:
      summary: Add a new product (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product added successfully

  /products/{productId}:
    get:
      summary: Retrieve details of a specific product
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to retrieve
      responses:
        '200':
          description: Product details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'

    put:
      summary: Update a specific product (Admin only)
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully

    delete:
      summary: Delete a specific product (Admin only)
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to delete
      responses:
        '204':
          description: Product deleted successfully

  /products/{productId}/image:
    post:
      summary: Upload an image for a specific product (Admin only)
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product for which the image is being uploaded
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Product image file to upload
      responses:
        '201':
          description: Image uploaded successfully
  /categories:
    get:
      summary: Retrieve a list of all categories
      responses:
        '200':
          description: List of categories retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'

    post:
      summary: Add a new category (Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category added successfully

  /categories/{categoryId}:
    put:
      summary: Update a specific category (Admin only)
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
          description: ID of the category to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
      responses:
        '200':
          description: Category updated successfully

    delete:
      summary: Delete a specific category (Admin only)
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
          description: ID of the category to delete
      responses:
        '204':
          description: Category deleted successfully
  /cart:
    get:
      summary: View the contents of the cart
      responses:
        '200':
          description: Successfully retrieved cart contents
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '404':
          description: Cart not found
        '500':
          description: Internal server error

    post:
      summary: Add a product to the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemCreate'
      responses:
        '201':
          description: Product added to the cart successfully
        '400':
          description: Invalid input
        '500':
          description: Internal server error
  /cart/{productId}:
    put:
      summary: Update the quantity of a product in the cart
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to update in the cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
      responses:
        '200':
          description: Product quantity updated successfully
        '404':
          description: Product not found in the cart
        '500':
          description: Internal server error

    delete:
      summary: Remove a product from the cart
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
          description: ID of the product to remove from the cart
      responses:
        '204':
          description: Product removed from the cart successfully
        '404':
          description: Product not found in the cart
        '500':
          description: Internal server error
  /orders:
    post:
      summary: Create a new order
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    get:
      summary: Get user's order history
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved orders history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /orders/{orderId}:
    get:
      summary: View order details
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDetails'
        '401':
          description: Unauthorized
        '404':
          description: Order not found
        '500':
          description: Internal server error
  /payments:
    post:
      summary: Initiate a payment
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInitiate'
      responses:
        '201':
          description: Payment initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    get:
      summary: Get user's payment history
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved payment history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentDetails'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /delivery:
    post:
      summary: Choose delivery method and input delivery address
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeliveryChoice'
      responses:
        '201':
          description: Delivery details added successfully
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

    get:
      summary: Track delivery status
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Successfully retrieved delivery status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryStatus'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /products/{productId}/reviews:
    post:
      summary: Add a review to a product
      security:
        - bearerAuth: [ ]
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product to which the review will be added
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewInput'
      responses:
        '201':
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '401':
          description: Unauthorized
        '404':
          description: Product not found
        '500':
          description: Internal server error

    get:
      summary: Get reviews of a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
          description: The ID of the product for which reviews are requested
      responses:
        '200':
          description: Successfully retrieved product reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          description: Product not found
        '500':
          description: Internal server error


components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: string
        imageUrl:
          type: string
      required:
        - name
        - price
        - categoryId
    ProductCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: string
        imageUrl:
          type: string
      required:
        - name
        - price
        - categoryId
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: string
        imageUrl:
          type: string
    Category:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required:
        - name
    CategoryCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
    CartItem:
      type: object
      properties:
        cartItemId:
          type: string
          description: Unique ID for the item in the cart
        productId:
          type: string
        quantity:
          type: integer
        userId:
          type: string

    CartItemCreate:
      type: object
      properties:
        productId:
          type: string
        userId:
          type: string
        quantity:
          type: integer
      required:
        - productId
        - quantity
    CartItemUpdate:
      type: object
      properties:
        quantity:
          type: integer
        productId:
          type: string
        userId:
          type: string
      required:
        - quantity
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        zipCode:
          type: string
    UserUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        zipCode:
          type: string
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        zipCode:
          type: string
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    OrderCreate:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        address:
          type: string
        phone:
          type: string
        comments:
          type: string
    OrderDetails:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          type: string
          enum: [ "в обработке", "готовится", "в пути", "доставлено" ]
        address:
          type: string
        phone:
          type: string
        comments:
          type: string
    OrderItem:
      type: object
      properties:
        orderItemId:
          type: string
          description: Unique ID for the item in the order
        productId:
          type: string
        quantity:
          type: integer
        price:
          type: number
        total:
          type: number
    PaymentInitiate:
      type: object
      properties:
        orderId:
          type: string
        paymentMethod:
          type: string
          enum: [ "Stripe", "PayPal" ]
    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
        status:
          type: string
    PaymentDetails:
      type: object
      properties:
        paymentId:
          type: string
        orderId:
          type: string
        paymentMethod:
          type: string
        status:
          type: string
          enum: [ "Оплачено", "Ожидает оплаты", "Отклонено" ]
          description: Status of the payment
    DeliveryChoice:
      type: object
      properties:
        orderId:
          type: string
        deliveryMethod:
          type: string
          enum: [ "Courier", "Pick-up" ]
        address:
          type: string
    DeliveryStatus:
      type: object
      properties:
        orderId:
          type: string
        status:
          type: string
        estimatedDeliveryTime:
          type: string
    ReviewInput:
      type: object
      properties:
        rating:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          description: Rating given to the product (1-5)
        comment:
          type: string
          description: User's review/comment on the product
    Review:
      type: object
      properties:
        userId:
          type: string
          description: ID of the user who wrote the review
        productId:
          type: string
          description: ID of the product being reviewed
        rating:
          type: integer
          format: int32
          minimum: 1
          maximum: 5
          description: Rating given to the product
        comment:
          type: string
          description: User's review/comment on the product
        timestamp:
          type: string
          format: date-time
          description: Time when the review was added
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]

