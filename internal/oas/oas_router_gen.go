// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "ca"
				if l := len("ca"); len(elem) >= l && elem[0:l] == "ca" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "rt"
					if l := len("rt"); len(elem) >= l && elem[0:l] == "rt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleCartGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCartPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleCartProductIdDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleCartProductIdPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PUT")
							}

							return
						}
					}
				case 't': // Prefix: "tegories"
					if l := len("tegories"); len(elem) >= l && elem[0:l] == "tegories" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleCategoriesGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCategoriesPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "categoryId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "DELETE":
								s.handleCategoriesCategoryIdDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleCategoriesCategoryIdPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,PUT")
							}

							return
						}
					}
				}
			case 'd': // Prefix: "delivery"
				if l := len("delivery"); len(elem) >= l && elem[0:l] == "delivery" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleDeliveryGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleDeliveryPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
			case 'o': // Prefix: "orders"
				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleOrdersGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleOrdersPostRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "orderId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleOrdersOrderIdGetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayments"
					if l := len("ayments"); len(elem) >= l && elem[0:l] == "ayments" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handlePaymentsGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handlePaymentsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
				case 'r': // Prefix: "roducts"
					if l := len("roducts"); len(elem) >= l && elem[0:l] == "roducts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleProductsGetRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleProductsPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleProductsProductIdDeleteRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleProductsProductIdGetRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PUT":
								s.handleProductsProductIdPutRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PUT")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "image"
								if l := len("image"); len(elem) >= l && elem[0:l] == "image" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handleProductsProductIdImagePostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
							case 'r': // Prefix: "reviews"
								if l := len("reviews"); len(elem) >= l && elem[0:l] == "reviews" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleProductsProductIdReviewsGetRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleProductsProductIdReviewsPostRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
							}
						}
					}
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "c"
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "hange-password"
						if l := len("hange-password"); len(elem) >= l && elem[0:l] == "hange-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUsersChangePasswordPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'o': // Prefix: "onfirm-email"
						if l := len("onfirm-email"); len(elem) >= l && elem[0:l] == "onfirm-email" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUsersConfirmEmailPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'f': // Prefix: "forgot-password"
					if l := len("forgot-password"); len(elem) >= l && elem[0:l] == "forgot-password" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleUsersForgotPasswordPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 'l': // Prefix: "login"
					if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleUsersLoginPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/google"
						if l := len("/google"); len(elem) >= l && elem[0:l] == "/google" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleUsersLoginGoogleGetRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/callback"
							if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleUsersLoginGoogleCallbackGetRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 'p': // Prefix: "profile"
					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleUsersProfileGetRequest([0]string{}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUsersProfilePutRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,PUT")
						}

						return
					}
				case 'r': // Prefix: "re"
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"
						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUsersRegisterPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 's': // Prefix: "set-password"
						if l := len("set-password"); len(elem) >= l && elem[0:l] == "set-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUsersResetPasswordPostRequest([0]string{}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "ca"
				if l := len("ca"); len(elem) >= l && elem[0:l] == "ca" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'r': // Prefix: "rt"
					if l := len("rt"); len(elem) >= l && elem[0:l] == "rt" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "CartGet"
							r.operationID = ""
							r.pathPattern = "/cart"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CartPost"
							r.operationID = ""
							r.pathPattern = "/cart"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: CartProductIdDelete
								r.name = "CartProductIdDelete"
								r.operationID = ""
								r.pathPattern = "/cart/{productId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								// Leaf: CartProductIdPut
								r.name = "CartProductIdPut"
								r.operationID = ""
								r.pathPattern = "/cart/{productId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 't': // Prefix: "tegories"
					if l := len("tegories"); len(elem) >= l && elem[0:l] == "tegories" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "CategoriesGet"
							r.operationID = ""
							r.pathPattern = "/categories"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "CategoriesPost"
							r.operationID = ""
							r.pathPattern = "/categories"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "categoryId"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								// Leaf: CategoriesCategoryIdDelete
								r.name = "CategoriesCategoryIdDelete"
								r.operationID = ""
								r.pathPattern = "/categories/{categoryId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								// Leaf: CategoriesCategoryIdPut
								r.name = "CategoriesCategoryIdPut"
								r.operationID = ""
								r.pathPattern = "/categories/{categoryId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'd': // Prefix: "delivery"
				if l := len("delivery"); len(elem) >= l && elem[0:l] == "delivery" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: DeliveryGet
						r.name = "DeliveryGet"
						r.operationID = ""
						r.pathPattern = "/delivery"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: DeliveryPost
						r.name = "DeliveryPost"
						r.operationID = ""
						r.pathPattern = "/delivery"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'o': // Prefix: "orders"
				if l := len("orders"); len(elem) >= l && elem[0:l] == "orders" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = "OrdersGet"
						r.operationID = ""
						r.pathPattern = "/orders"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "OrdersPost"
						r.operationID = ""
						r.pathPattern = "/orders"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "orderId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: OrdersOrderIdGet
							r.name = "OrdersOrderIdGet"
							r.operationID = ""
							r.pathPattern = "/orders/{orderId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayments"
					if l := len("ayments"); len(elem) >= l && elem[0:l] == "ayments" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: PaymentsGet
							r.name = "PaymentsGet"
							r.operationID = ""
							r.pathPattern = "/payments"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							// Leaf: PaymentsPost
							r.name = "PaymentsPost"
							r.operationID = ""
							r.pathPattern = "/payments"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "roducts"
					if l := len("roducts"); len(elem) >= l && elem[0:l] == "roducts" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "ProductsGet"
							r.operationID = ""
							r.pathPattern = "/products"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = "ProductsPost"
							r.operationID = ""
							r.pathPattern = "/products"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "productId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = "ProductsProductIdDelete"
								r.operationID = ""
								r.pathPattern = "/products/{productId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = "ProductsProductIdGet"
								r.operationID = ""
								r.pathPattern = "/products/{productId}"
								r.args = args
								r.count = 1
								return r, true
							case "PUT":
								r.name = "ProductsProductIdPut"
								r.operationID = ""
								r.pathPattern = "/products/{productId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'i': // Prefix: "image"
								if l := len("image"); len(elem) >= l && elem[0:l] == "image" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										// Leaf: ProductsProductIdImagePost
										r.name = "ProductsProductIdImagePost"
										r.operationID = ""
										r.pathPattern = "/products/{productId}/image"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'r': // Prefix: "reviews"
								if l := len("reviews"); len(elem) >= l && elem[0:l] == "reviews" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: ProductsProductIdReviewsGet
										r.name = "ProductsProductIdReviewsGet"
										r.operationID = ""
										r.pathPattern = "/products/{productId}/reviews"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										// Leaf: ProductsProductIdReviewsPost
										r.name = "ProductsProductIdReviewsPost"
										r.operationID = ""
										r.pathPattern = "/products/{productId}/reviews"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					}
				}
			case 'u': // Prefix: "users/"
				if l := len("users/"); len(elem) >= l && elem[0:l] == "users/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'c': // Prefix: "c"
					if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "hange-password"
						if l := len("hange-password"); len(elem) >= l && elem[0:l] == "hange-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UsersChangePasswordPost
								r.name = "UsersChangePasswordPost"
								r.operationID = ""
								r.pathPattern = "/users/change-password"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'o': // Prefix: "onfirm-email"
						if l := len("onfirm-email"); len(elem) >= l && elem[0:l] == "onfirm-email" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UsersConfirmEmailPost
								r.name = "UsersConfirmEmailPost"
								r.operationID = ""
								r.pathPattern = "/users/confirm-email"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'f': // Prefix: "forgot-password"
					if l := len("forgot-password"); len(elem) >= l && elem[0:l] == "forgot-password" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: UsersForgotPasswordPost
							r.name = "UsersForgotPasswordPost"
							r.operationID = ""
							r.pathPattern = "/users/forgot-password"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'l': // Prefix: "login"
					if l := len("login"); len(elem) >= l && elem[0:l] == "login" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "UsersLoginPost"
							r.operationID = ""
							r.pathPattern = "/users/login"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/google"
						if l := len("/google"); len(elem) >= l && elem[0:l] == "/google" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "UsersLoginGoogleGet"
								r.operationID = ""
								r.pathPattern = "/users/login/google"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/callback"
							if l := len("/callback"); len(elem) >= l && elem[0:l] == "/callback" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: UsersLoginGoogleCallbackGet
									r.name = "UsersLoginGoogleCallbackGet"
									r.operationID = ""
									r.pathPattern = "/users/login/google/callback"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'p': // Prefix: "profile"
					if l := len("profile"); len(elem) >= l && elem[0:l] == "profile" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: UsersProfileGet
							r.name = "UsersProfileGet"
							r.operationID = ""
							r.pathPattern = "/users/profile"
							r.args = args
							r.count = 0
							return r, true
						case "PUT":
							// Leaf: UsersProfilePut
							r.name = "UsersProfilePut"
							r.operationID = ""
							r.pathPattern = "/users/profile"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "re"
					if l := len("re"); len(elem) >= l && elem[0:l] == "re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'g': // Prefix: "gister"
						if l := len("gister"); len(elem) >= l && elem[0:l] == "gister" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UsersRegisterPost
								r.name = "UsersRegisterPost"
								r.operationID = ""
								r.pathPattern = "/users/register"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "set-password"
						if l := len("set-password"); len(elem) >= l && elem[0:l] == "set-password" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UsersResetPasswordPost
								r.name = "UsersResetPasswordPost"
								r.operationID = ""
								r.pathPattern = "/users/reset-password"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			}
		}
	}
	return r, false
}
