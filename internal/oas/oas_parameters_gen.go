// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CartProductIdDeleteParams is parameters of DELETE /cart/{productId} operation.
type CartProductIdDeleteParams struct {
	// ID of the product to remove from the cart.
	ProductId string
}

func unpackCartProductIdDeleteParams(packed middleware.Parameters) (params CartProductIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeCartProductIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params CartProductIdDeleteParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CartProductIdPutParams is parameters of PUT /cart/{productId} operation.
type CartProductIdPutParams struct {
	// ID of the product to update in the cart.
	ProductId string
}

func unpackCartProductIdPutParams(packed middleware.Parameters) (params CartProductIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeCartProductIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params CartProductIdPutParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CategoriesCategoryIdDeleteParams is parameters of DELETE /categories/{categoryId} operation.
type CategoriesCategoryIdDeleteParams struct {
	// ID of the category to delete.
	CategoryId string
}

func unpackCategoriesCategoryIdDeleteParams(packed middleware.Parameters) (params CategoriesCategoryIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "categoryId",
			In:   "path",
		}
		params.CategoryId = packed[key].(string)
	}
	return params
}

func decodeCategoriesCategoryIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params CategoriesCategoryIdDeleteParams, _ error) {
	// Decode path: categoryId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "categoryId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CategoryId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "categoryId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CategoriesCategoryIdPutParams is parameters of PUT /categories/{categoryId} operation.
type CategoriesCategoryIdPutParams struct {
	// ID of the category to update.
	CategoryId string
}

func unpackCategoriesCategoryIdPutParams(packed middleware.Parameters) (params CategoriesCategoryIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "categoryId",
			In:   "path",
		}
		params.CategoryId = packed[key].(string)
	}
	return params
}

func decodeCategoriesCategoryIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params CategoriesCategoryIdPutParams, _ error) {
	// Decode path: categoryId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "categoryId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CategoryId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "categoryId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// OrdersOrderIdGetParams is parameters of GET /orders/{orderId} operation.
type OrdersOrderIdGetParams struct {
	OrderId string
}

func unpackOrdersOrderIdGetParams(packed middleware.Parameters) (params OrdersOrderIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "orderId",
			In:   "path",
		}
		params.OrderId = packed[key].(string)
	}
	return params
}

func decodeOrdersOrderIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params OrdersOrderIdGetParams, _ error) {
	// Decode path: orderId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "orderId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.OrderId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "orderId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsGetParams is parameters of GET /products operation.
type ProductsGetParams struct {
	// Filter products by category.
	Category OptString
	// Filter products with price greater than or equal to this value.
	PriceMin OptFloat64
	// Filter products with price less than or equal to this value.
	PriceMax OptFloat64
	// Sort products by popularity or price.
	SortBy OptProductsGetSortBy
}

func unpackProductsGetParams(packed middleware.Parameters) (params ProductsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "category",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Category = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "priceMin",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PriceMin = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "priceMax",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.PriceMax = v.(OptFloat64)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "sortBy",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.SortBy = v.(OptProductsGetSortBy)
		}
	}
	return params
}

func decodeProductsGetParams(args [0]string, argsEscaped bool, r *http.Request) (params ProductsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: category.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "category",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCategoryVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCategoryVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Category.SetTo(paramsDotCategoryVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "category",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: priceMin.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "priceMin",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPriceMinVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotPriceMinVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PriceMin.SetTo(paramsDotPriceMinVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PriceMin.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "priceMin",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: priceMax.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "priceMax",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotPriceMaxVal float64
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToFloat64(val)
					if err != nil {
						return err
					}

					paramsDotPriceMaxVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.PriceMax.SetTo(paramsDotPriceMaxVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.PriceMax.Get(); ok {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(value)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "priceMax",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: sortBy.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "sortBy",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotSortByVal ProductsGetSortBy
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotSortByVal = ProductsGetSortBy(c)
					return nil
				}(); err != nil {
					return err
				}
				params.SortBy.SetTo(paramsDotSortByVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.SortBy.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "sortBy",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdDeleteParams is parameters of DELETE /products/{productId} operation.
type ProductsProductIdDeleteParams struct {
	// ID of the product to delete.
	ProductId string
}

func unpackProductsProductIdDeleteParams(packed middleware.Parameters) (params ProductsProductIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdDeleteParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdGetParams is parameters of GET /products/{productId} operation.
type ProductsProductIdGetParams struct {
	// ID of the product to retrieve.
	ProductId string
}

func unpackProductsProductIdGetParams(packed middleware.Parameters) (params ProductsProductIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdGetParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdImagePostParams is parameters of POST /products/{productId}/image operation.
type ProductsProductIdImagePostParams struct {
	// ID of the product for which the image is being uploaded.
	ProductId string
}

func unpackProductsProductIdImagePostParams(packed middleware.Parameters) (params ProductsProductIdImagePostParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdImagePostParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdImagePostParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdPutParams is parameters of PUT /products/{productId} operation.
type ProductsProductIdPutParams struct {
	// ID of the product to update.
	ProductId string
}

func unpackProductsProductIdPutParams(packed middleware.Parameters) (params ProductsProductIdPutParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdPutParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdPutParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdReviewsGetParams is parameters of GET /products/{productId}/reviews operation.
type ProductsProductIdReviewsGetParams struct {
	// The ID of the product for which reviews are requested.
	ProductId string
}

func unpackProductsProductIdReviewsGetParams(packed middleware.Parameters) (params ProductsProductIdReviewsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdReviewsGetParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdReviewsGetParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ProductsProductIdReviewsPostParams is parameters of POST /products/{productId}/reviews operation.
type ProductsProductIdReviewsPostParams struct {
	// The ID of the product to which the review will be added.
	ProductId string
}

func unpackProductsProductIdReviewsPostParams(packed middleware.Parameters) (params ProductsProductIdReviewsPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "productId",
			In:   "path",
		}
		params.ProductId = packed[key].(string)
	}
	return params
}

func decodeProductsProductIdReviewsPostParams(args [1]string, argsEscaped bool, r *http.Request) (params ProductsProductIdReviewsPostParams, _ error) {
	// Decode path: productId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "productId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ProductId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "productId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
