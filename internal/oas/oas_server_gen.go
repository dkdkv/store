// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CartGet implements GET /cart operation.
	//
	// View the contents of the cart.
	//
	// GET /cart
	CartGet(ctx context.Context) (CartGetRes, error)
	// CartPost implements POST /cart operation.
	//
	// Add a product to the cart.
	//
	// POST /cart
	CartPost(ctx context.Context, req *CartItemCreate) (CartPostRes, error)
	// CartProductIdDelete implements DELETE /cart/{productId} operation.
	//
	// Remove a product from the cart.
	//
	// DELETE /cart/{productId}
	CartProductIdDelete(ctx context.Context, params CartProductIdDeleteParams) (CartProductIdDeleteRes, error)
	// CartProductIdPut implements PUT /cart/{productId} operation.
	//
	// Update the quantity of a product in the cart.
	//
	// PUT /cart/{productId}
	CartProductIdPut(ctx context.Context, req *CartProductIdPutReq, params CartProductIdPutParams) (CartProductIdPutRes, error)
	// CategoriesCategoryIdDelete implements DELETE /categories/{categoryId} operation.
	//
	// Delete a specific category (Admin only).
	//
	// DELETE /categories/{categoryId}
	CategoriesCategoryIdDelete(ctx context.Context, params CategoriesCategoryIdDeleteParams) error
	// CategoriesCategoryIdPut implements PUT /categories/{categoryId} operation.
	//
	// Update a specific category (Admin only).
	//
	// PUT /categories/{categoryId}
	CategoriesCategoryIdPut(ctx context.Context, req *CategoryUpdate, params CategoriesCategoryIdPutParams) error
	// CategoriesGet implements GET /categories operation.
	//
	// Retrieve a list of all categories.
	//
	// GET /categories
	CategoriesGet(ctx context.Context) ([]Category, error)
	// CategoriesPost implements POST /categories operation.
	//
	// Add a new category (Admin only).
	//
	// POST /categories
	CategoriesPost(ctx context.Context, req *CategoryCreate) error
	// DeliveryGet implements GET /delivery operation.
	//
	// Track delivery status.
	//
	// GET /delivery
	DeliveryGet(ctx context.Context) (DeliveryGetRes, error)
	// DeliveryPost implements POST /delivery operation.
	//
	// Choose delivery method and input delivery address.
	//
	// POST /delivery
	DeliveryPost(ctx context.Context, req *DeliveryChoice) (DeliveryPostRes, error)
	// OrdersGet implements GET /orders operation.
	//
	// Get user's order history.
	//
	// GET /orders
	OrdersGet(ctx context.Context) (OrdersGetRes, error)
	// OrdersOrderIdGet implements GET /orders/{orderId} operation.
	//
	// View order details.
	//
	// GET /orders/{orderId}
	OrdersOrderIdGet(ctx context.Context, params OrdersOrderIdGetParams) (OrdersOrderIdGetRes, error)
	// OrdersPost implements POST /orders operation.
	//
	// Create a new order.
	//
	// POST /orders
	OrdersPost(ctx context.Context, req *OrderCreate) (OrdersPostRes, error)
	// PaymentsGet implements GET /payments operation.
	//
	// Get user's payment history.
	//
	// GET /payments
	PaymentsGet(ctx context.Context) (PaymentsGetRes, error)
	// PaymentsPost implements POST /payments operation.
	//
	// Initiate a payment.
	//
	// POST /payments
	PaymentsPost(ctx context.Context, req *PaymentInitiate) (PaymentsPostRes, error)
	// ProductsGet implements GET /products operation.
	//
	// Retrieve a list of products.
	//
	// GET /products
	ProductsGet(ctx context.Context, params ProductsGetParams) ([]Product, error)
	// ProductsPost implements POST /products operation.
	//
	// Add a new product (Admin only).
	//
	// POST /products
	ProductsPost(ctx context.Context, req *ProductCreate) error
	// ProductsProductIdDelete implements DELETE /products/{productId} operation.
	//
	// Delete a specific product (Admin only).
	//
	// DELETE /products/{productId}
	ProductsProductIdDelete(ctx context.Context, params ProductsProductIdDeleteParams) error
	// ProductsProductIdGet implements GET /products/{productId} operation.
	//
	// Retrieve details of a specific product.
	//
	// GET /products/{productId}
	ProductsProductIdGet(ctx context.Context, params ProductsProductIdGetParams) (*Product, error)
	// ProductsProductIdImagePost implements POST /products/{productId}/image operation.
	//
	// Upload an image for a specific product (Admin only).
	//
	// POST /products/{productId}/image
	ProductsProductIdImagePost(ctx context.Context, req *ProductsProductIdImagePostReq, params ProductsProductIdImagePostParams) error
	// ProductsProductIdPut implements PUT /products/{productId} operation.
	//
	// Update a specific product (Admin only).
	//
	// PUT /products/{productId}
	ProductsProductIdPut(ctx context.Context, req *ProductUpdate, params ProductsProductIdPutParams) error
	// ProductsProductIdReviewsGet implements GET /products/{productId}/reviews operation.
	//
	// Get reviews of a product.
	//
	// GET /products/{productId}/reviews
	ProductsProductIdReviewsGet(ctx context.Context, params ProductsProductIdReviewsGetParams) (ProductsProductIdReviewsGetRes, error)
	// ProductsProductIdReviewsPost implements POST /products/{productId}/reviews operation.
	//
	// Add a review to a product.
	//
	// POST /products/{productId}/reviews
	ProductsProductIdReviewsPost(ctx context.Context, req *ReviewInput, params ProductsProductIdReviewsPostParams) (ProductsProductIdReviewsPostRes, error)
	// UsersChangePasswordPost implements POST /users/change-password operation.
	//
	// Change password for authenticated user.
	//
	// POST /users/change-password
	UsersChangePasswordPost(ctx context.Context, req *UsersChangePasswordPostReq) error
	// UsersConfirmEmailPost implements POST /users/confirm-email operation.
	//
	// Confirm email using the provided token.
	//
	// POST /users/confirm-email
	UsersConfirmEmailPost(ctx context.Context, req *UsersConfirmEmailPostReq) error
	// UsersForgotPasswordPost implements POST /users/forgot-password operation.
	//
	// Request password reset.
	//
	// POST /users/forgot-password
	UsersForgotPasswordPost(ctx context.Context, req *UsersForgotPasswordPostReq) error
	// UsersLoginGoogleCallbackGet implements GET /users/login/google/callback operation.
	//
	// Handle Google authentication callback.
	//
	// GET /users/login/google/callback
	UsersLoginGoogleCallbackGet(ctx context.Context) (*UsersLoginGoogleCallbackGetOK, error)
	// UsersLoginGoogleGet implements GET /users/login/google operation.
	//
	// Start authentication with Google.
	//
	// GET /users/login/google
	UsersLoginGoogleGet(ctx context.Context) error
	// UsersLoginPost implements POST /users/login operation.
	//
	// Authenticate user.
	//
	// POST /users/login
	UsersLoginPost(ctx context.Context, req *UsersLoginPostReq) (*UsersLoginPostOK, error)
	// UsersProfileGet implements GET /users/profile operation.
	//
	// Get user's profile information.
	//
	// GET /users/profile
	UsersProfileGet(ctx context.Context) (UsersProfileGetRes, error)
	// UsersProfilePut implements PUT /users/profile operation.
	//
	// Update user's profile information.
	//
	// PUT /users/profile
	UsersProfilePut(ctx context.Context, req *UserUpdate) (UsersProfilePutRes, error)
	// UsersRegisterPost implements POST /users/register operation.
	//
	// Register a new user.
	//
	// POST /users/register
	UsersRegisterPost(ctx context.Context, req *UserRegistration) (UsersRegisterPostRes, error)
	// UsersResetPasswordPost implements POST /users/reset-password operation.
	//
	// Reset password using the provided token.
	//
	// POST /users/reset-password
	UsersResetPasswordPost(ctx context.Context, req *UsersResetPasswordPostReq) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
